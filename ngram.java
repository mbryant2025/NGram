import java.util.Comparator;
import java.util.TreeSet;
import java.util.regex.Pattern;
import java.io.*;

public class ngram {

    public static double[] rickArr = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.022575833532966e-10, 1.022575833532966e-10, 1.022575833532966e-10, 1.022575833532966e-10, 1.022575833532966e-10, 1.0990176526773761e-10, 1.1753784850172212e-10, 1.528026514842549e-11, 2.301070445298592e-11, 2.301070445298592e-11, 2.301070445298592e-11, 2.301070445298592e-11, 3.648535144641838e-11, 1.547028655972988e-10, 7.810121557419845e-10, 1.482873339992656e-09, 1.8900628919103573e-09, 2.2857186857524623e-09, 2.6401881236814972e-09, 2.8534762172175274e-09, 3.0778215055958314e-09, 2.730098892987444e-09, 2.271888026912043e-09, 2.0876134947706803e-09, 1.971825670997264e-09, 1.857446307873544e-09, 1.8092508761010812e-09, 1.8605952334382893e-09, 1.8349794699596651e-09, 1.998957380574698e-09, 2.1479763364798792e-09, 2.210797227825927e-09, 2.4818661094526203e-09, 2.872651481768327e-09, 2.9633798906810884e-09, 3.5239016783959544e-09, 3.895322350392202e-09, 4.459246178661098e-09, 5.055920317330122e-09, 5.417796592307614e-09, 6.0181285669155426e-09, 6.698196854314022e-09, 7.630819278046733e-09, 7.797345562871832e-09, 7.605377026566529e-09, 7.796355307375184e-09, 8.077206755293295e-09, 8.04438773371885e-09, 8.00388977317823e-09};
    public static double[] cheeseArr = {8.828440741126542e-06, 8.561829235986805e-06, 8.4040997686922e-06, 8.24352699575164e-06, 8.325770003076675e-06, 8.368243405649472e-06, 8.11287808184196e-06, 8.227148685234298e-06, 8.1347844960484e-06, 7.915482780975123e-06, 8.141905514743744e-06, 7.728096729156926e-06, 7.594545877509518e-06, 7.54856487869152e-06, 7.149526027205866e-06, 7.206162276166392e-06, 7.601240018370194e-06, 7.426630937905948e-06, 7.5007596283934865e-06, 7.413566761117961e-06, 7.391741681723423e-06, 7.537008709082979e-06, 7.515091121084489e-06, 7.231402053418735e-06, 7.09987482748277e-06, 7.026546167513256e-06, 6.981723410197966e-06, 7.056676297777032e-06, 7.05918403452545e-06, 6.919218451782528e-06, 6.923324430577589e-06, 7.0266689492979946e-06, 7.245690799858753e-06, 7.1252862393781205e-06, 7.044778807799698e-06, 6.951670132236488e-06, 7.104523449795253e-06, 7.095705833697659e-06, 7.059177473170816e-06, 7.260778017683021e-06, 7.532104778614925e-06, 7.717022201956882e-06, 8.044540988651403e-06, 8.26680642213822e-06, 8.565258732622687e-06, 8.777148390696052e-06, 8.588938856389308e-06, 8.701029271053682e-06, 8.818087865490399e-06, 8.879835019927538e-06, 8.86425693481994e-06, 8.789758144952691e-06, 8.812921545800886e-06, 8.989235279191884e-06, 8.842003288529149e-06, 8.647810968146327e-06, 8.64217404991255e-06, 8.631892212309007e-06, 8.788974030591946e-06, 8.950176899296429e-06, 9.011774117035592e-06, 9.511674631669718e-06, 1.0468002333904482e-05, 1.0888413011603651e-05, 1.1634996163983092e-05, 1.1853925051192552e-05, 1.2038088633354552e-05, 1.2098819752281992e-05, 1.218110615549708e-05, 1.1786525647039522e-05, 1.138883804482507e-05, 1.101330066636105e-05, 1.096324493638738e-05, 1.0604809176584242e-05, 1.0693100973315132e-05, 1.0524290831069391e-05, 1.028214449304089e-05, 1.049957128478646e-05, 1.0438983736094082e-05, 1.017315428595923e-05, 1.018417411354935e-05, 9.97939007772532e-06, 9.917441795031274e-06, 9.9701102434275e-06, 9.976783076126594e-06, 1.0280820268755112e-05, 1.077177629278074e-05, 1.1055511744676291e-05, 1.179187815328727e-05, 1.2723199558552422e-05, 1.351751455201468e-05, 1.4611169977537682e-05, 1.5280873023065003e-05, 1.6563611877375353e-05, 1.7756132755104253e-05, 1.790955476670725e-05, 1.767831262051394e-05, 1.7489572720868243e-05, 1.70312902940038e-05, 1.7134181429615372e-05, 1.6546135416969522e-05, 1.629324287932831e-05, 1.6328848297624582e-05, 1.637439241416619e-05, 1.6703559075332513e-05, 1.668425725906023e-05, 1.633902346449239e-05, 1.602378207670491e-05, 1.5936122378791753e-05, 1.6053234113704612e-05, 1.6049370060500223e-05, 1.576256675304778e-05, 1.560259988764301e-05, 1.5421005108302263e-05, 1.544803074336544e-05, 1.5554698620690033e-05, 1.528544557264207e-05, 1.5099468458044741e-05, 1.4892211506126582e-05, 1.476476778147376e-05, 1.4752211297621082e-05, 1.4807223254008151e-05, 1.4195971873830002e-05, 1.4085591958844032e-05, 1.409927400735406e-05, 1.3991340892971492e-05, 1.4302748110951923e-05, 1.4333130041320272e-05, 1.398532276652986e-05, 1.40459948982295e-05, 1.4413383983732532e-05, 1.4619308006201341e-05, 1.5064163822639133e-05, 1.4901671160519722e-05, 1.4950175032676533e-05, 1.5463906363168333e-05, 1.6032861302457082e-05, 1.6121653191346142e-05, 1.613457815048085e-05, 1.609620812814682e-05, 1.637808210424347e-05, 1.6567765279822713e-05, 1.6315423506187343e-05, 1.58930140189893e-05, 1.523088680447212e-05, 1.4694764623917373e-05, 1.474240915350882e-05, 1.43447477967129e-05, 1.4010861507683463e-05, 1.3825147107127121e-05, 1.3934898561274162e-05, 1.4062833413065941e-05, 1.41733696312128e-05, 1.3818759076197492e-05, 1.3477012804027512e-05, 1.3086491500351772e-05, 1.2732821752641542e-05, 1.1851553348865952e-05, 1.137736372973969e-05, 1.0762702653924602e-05, 1.0151015625784302e-05, 9.82683806276847e-06, 9.453864290013111e-06, 9.120266830515383e-06, 8.914207683119457e-06, 8.671574765425508e-06, 8.500263187930354e-06, 8.296871198711282e-06, 8.148736339665317e-06, 8.041163255256834e-06, 7.988112039518975e-06, 8.168074016014413e-06, 8.237947245756264e-06, 8.395009379975299e-06, 8.619335078817259e-06, 9.003368307146178e-06, 9.280492382198905e-06, 9.385108439476293e-06, 9.537564957489459e-06, 9.798352558781125e-06, 1.012418306345352e-05, 1.034943189941779e-05, 1.0373577684471711e-05, 1.0545255203656522e-05, 1.075363096398567e-05, 1.0922811400502851e-05, 1.078640278657465e-05, 1.063545563998299e-05, 1.0487768512185931e-05, 1.0464210130781531e-05, 1.045452466184672e-05, 1.0495958382047581e-05, 1.0523979004314502e-05, 1.076189892046386e-05, 1.1019963494618422e-05, 1.113566018570314e-05, 1.125970733742828e-05, 1.1329103472235142e-05, 1.1468944389240011e-05, 1.138880894099461e-05, 1.152429350830581e-05, 1.161963921601584e-05, 1.1950123345221592e-05, 1.2108719472182982e-05, 1.2411450630419753e-05, 1.275968679692596e-05, 1.3585277234337163e-05, 1.4356689072363742e-05, 1.564852846058784e-05, 1.653121866443793e-05, 1.719668333472717e-05, 1.7860763754080313e-05, 1.8585582698246333e-05, 1.8814025419747592e-05, 1.8783362975227643e-05, 1.8036206061619202e-05, 1.764392332656176e-05, 1.7738809522901043e-05, 1.7633887910051272e-05, 1.720064847177127e-05};
    public static double[] circleDerivs = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.7017296488511658, 0.568550881787277, 0.4885449689927579, 0.4335234968096385, 0.3925931403531869, 0.36053432435515154, 0.3344903270142533, 0.31274818470675225, 0.29420974429939156, 0.27813401531556575, 0.2640003290056402, 0.25143059134579926, 0.2401426533687061, 0.22992107195371592, 0.22059807931239772, 0.212040798212929, 0.2041424156054053, 0.19681594263595203, 0.1899897101638503, 0.1836040564496613, 0.17760885100820745, 0.1719616159473373, 0.1666260814504473, 0.16157106152832484, 0.15676956930880337, 0.15219811374831524, 0.1478361353411451, 0.14366554945736382, 0.1396703738391641, 0.1358364225023703, 0.13215105247772863, 0.12860295292853532, 0.12518196850268704, 0.12187895053154002, 0.11868563102565774, 0.11559451544621077, 0.1125987910281622, 0.1096922480540801, 0.1068692119671658, 0.10412448459983495, 0.101453293103121, 0.09885124540978082, 0.09631429126356793, 0.09383868800888384, 0.09142097046676574, 0.08905792433101056, 0.08674656260691552, 0.08448410468836681, 0.08226795772976846, 0.08009570001990952, 0.07796506610718025, 0.07587393346105595, 0.07382031048467406, 0.07180232571860386, 0.06981821809733676, 0.06786632813825302, 0.06594508995837083, 0.06405302402748925, 0.06218873057775464, 0.06035088359950267, 0.05853822536170298, 0.0567495614026618, 0.054983755942991416, 0.05323972767837666, 0.0515164459144762, 0.04981292701049432, 0.04812823110162888, 0.04646145907381885, 0.044811749767040186, 0.04317827738588401, 0.04156024909834226, 0.03995690280565982, 0.03836750506782293, 0.03679134917076832, 0.03522775332274162, 0.033676058968427416, 0.03213562921053441, 0.030605847329465388, 0.029086115392543764, 0.02757585294502095, 0.02607449577576007, 0.024581494751091917, 0.023096314710875424, 0.021618433421274952, 0.020147340579195618, 0.01868253686370194, 0.017223533030087636, 0.015769849042570675, 0.014321013241860527, 0.012876561544087171, 0.011436036667796579, 0.009998987385907626, 0.008564967799692328, 0.007133536631987112, 0.005704256536968927, 0.004276693423937579, 0.0028504157926360018, 0.0014249940777140944, 0.0, -0.0014249940777140944, -0.0028504157926360018, -0.004276693423937579, -0.005704256536968927, -0.007133536631987112, -0.008564967799692328, -0.009998987385907626, -0.011436036667796579, -0.012876561544087171, -0.014321013241860527, -0.015769849042570675, -0.017223533030087636, -0.01868253686370194, -0.020147340579195618, -0.021618433421274952, -0.023096314710875424, -0.024581494751091917, -0.02607449577576007, -0.02757585294502095, -0.029086115392543764, -0.030605847329465388, -0.03213562921053441, -0.033676058968427416, -0.03522775332274162, -0.03679134917076832, -0.03836750506782293, -0.03995690280565982, -0.04156024909834226, -0.04317827738588401, -0.044811749767040186, -0.04646145907381885, -0.04812823110162888, -0.04981292701049432, -0.0515164459144762, -0.05323972767837666, -0.054983755942991416, -0.0567495614026618, -0.05853822536170298, -0.06035088359950267, -0.06218873057775464, -0.06405302402748925, -0.06594508995837083, -0.06786632813825302, -0.06981821809733676, -0.07180232571860386, -0.07382031048467406, -0.07587393346105595, -0.07796506610718025, -0.08009570001990952, -0.08226795772976846, -0.08448410468836681, -0.08674656260691552, -0.08905792433101056, -0.09142097046676574, -0.09383868800888384, -0.09631429126356793, -0.09885124540978082, -0.101453293103121, -0.10412448459983495, -0.1068692119671658, -0.1096922480540801, -0.1125987910281622, -0.11559451544621077, -0.11868563102565774, -0.12187895053154002, -0.12518196850268704, -0.12860295292853532, -0.13215105247772863, -0.1358364225023703, -0.1396703738391641, -0.14366554945736382, -0.1478361353411451, -0.15219811374831524, -0.15676956930880337, -0.16157106152832484, -0.1666260814504473, -0.1719616159473373, -0.17760885100820745, -0.1836040564496613, -0.1899897101638503, -0.19681594263595203, -0.2041424156054053, -0.212040798212929, -0.22059807931239772, -0.22992107195371592, -0.2401426533687061, -0.25143059134579926, -0.2640003290056402, -0.27813401531556575, -0.29420974429939156, -0.31274818470675225, -0.3344903270142533, -0.36053432435515154, -0.3925931403531869, -0.4335234968096385, -0.4885449689927579, -0.568550881787277, -0.7017296488511658, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

    public static double getMetrics(double[] arr) {

        //return -1 * boundedMaxZ(arr);
        //return -1 * r2(arr, rickArr) / (Math.abs(avg(arr) - avg(rickArr)));
        return errorSq(arr, rickArr);
        // return errorSq(arr, cheeseArr);
        // return approximatesCircle(arr);

    }

    public static double errorSq(double[] arr, double[] comp) {

        double err = 0;

        for(int i = 0; i < arr.length; i++) {
            double diff = arr[i] - comp[i];
            err += diff * diff;
        }

        return err;
    }

    public static double approximatesCircle(double[] arr) {

        double[] derivs = new double[arr.length - 1];

        for(int i = 0; i < arr.length - 1; i++) {
            derivs[i] = arr[i + 1] - arr[i];
        }

        double m = absMax(derivs);

        double err = 0;

        double max_der = absMax(derivs);

        if(max_der > 0.1 * absMax(arr))
            err += 10;

        for(int i = 0; i < derivs.length; i++) {
            derivs[i] = derivs[i] / m;
        }


        for(int i = 0; i < arr.length - 1; i++) {
            double diff = derivs[i] - circleDerivs[i];
            err += diff * diff;
        }

        //Check if data has spike which causes derivatives to be close to zero --> false positive
        if(maxZ(arr) > 3) {
            err += 0;
        }


        int armx = argmax(arr);

        if(armx < 23 || armx > arr.length - 24)
            err += 0;

        if(stdev(arr) < 0.2 * absMax(arr)) {
            err += 0;
        }

        //Add error for each turning point
        err += countRoots(derivs) * 0.05;

        return err;

    }

    public static int countRoots(double[] arr) {

        int count = 0;

        for(int i = 1; i < arr.length; i++) {
            if((arr[i - 1] < 0 && arr[i] > 0) || (arr[i - 1] > 0 && arr[i] < 0))
                count++;
        }

        return count;

    }

    public static double r2(double[] arr, double[] comp) {

       int n = arr.length;

        double sumArr = 0;
        double sumComp = 0;

        double sumProd = 0;

        double sumArrSqu = 0;
        double sumCompSqu = 0;

        for(double e: arr) {
            sumArr += e;
            sumArrSqu += e * e;
        }

        for(double e: comp) {
            sumComp += e;
            sumCompSqu += e * e;
        }

        for(int i = 0; i < arr.length; i++) {
            sumProd += arr[i] * comp[i];
        }

        double r =  (n * sumProd - sumArr * sumComp) / Math.sqrt((n * sumArrSqu - sumArr * sumArr) * (n * sumCompSqu - sumComp * sumComp));
        
        return Math.sqrt(r);

    }

    public static double maxZ(double[] arr) {
        double maxZ = 0;

        double std = stdev(arr);
        double mean = avg(arr);

        for(double e: arr) {

            double z = (e - mean) / std;

            if(z > maxZ)
                maxZ = z;
        }

        return maxZ;
    }

    public static double boundedMaxZ(double[] arr) {

        double maxZ = 0;

        double std = stdev(arr);
        double mean = avg(arr);

        int armx = argmax(arr);

        for(double e: arr) {

            double z = (e - mean) / std;

            if(z > maxZ)
                maxZ = z;
        }

        if(armx < 3 || armx > arr.length - 4)
            maxZ -= 100;

        return maxZ;
    }

    public static double stdev(double[] arr) {
        double sum = 0.0, standardDeviation = 0.0;
        int length = arr.length;

        for(double num : arr) {
            sum += num;
        }

        double mean = sum/length;

        for(double num: arr) {
            standardDeviation += Math.pow(num - mean, 2);
        }

        return Math.sqrt(standardDeviation/length);
    }

    public static double avg(double[] arr) {

        double sum = 0;

        for(double e: arr) {
            sum += e;
        }

        return sum/arr.length;
    }

    public static int argmax(double[] array) {
        double max = array[0];
        int re = 0;
        for (int i = 1; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];
                re = i;
            }
        }
        return re;
    }

    public static int instances(String s, char c) {

        int count = 0;

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                count++;
            }
        }

        return count;
    }

    public static class Pair<T,U> {
        private final T key;
        private final U value;
    
        public Pair(T key, U value) {
            this.key = key;
            this.value = value;
        }
    
        public T getKey() {
            return this.key;
        }
    
        public U getValue() {
            return this.value;
        }
    }

    public static double absMax(double[] arr) {

        double m = -99999;

        for(double e: arr) {
            if(Math.abs(e) > m)
                m = Math.abs(e);
        }

        return m;
    }

    public static void printSet(TreeSet<Pair<String, Double>> ts, int itr, String word) {

        System.out.println("----------------------------------------------------");

        for(Pair<String, Double> p: ts) {
            if(p.getKey().length() > 7) {
                System.out.println(p.getKey() + "\t" + p.getValue());
            }
            else {
                System.out.println(p.getKey() + "\t\t" + p.getValue());
            }
        }

        System.out.println();
        System.out.println("Iteration: " + itr + "\tCurrent word: " + word);

    }

    public static void main(String args[]) throws IOException {

        int setSize = 10;

        TreeSet<Pair<String,Double> > ts = new TreeSet<Pair<String,Double>>(Comparator.comparing(Pair::getValue));


        File f = new File("timeseries.txt");
        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        String REGEX = ", ";
        Pattern pattern = Pattern.compile(REGEX);

        String line = "";
        String word;
        String strArray;
        int idx;
        double wordScore;
        int itr = 0;

        while((line = br.readLine()) != null) {

            if(instances(line.substring(0, line.indexOf("[")), ' ') > 1)
                continue;

            idx = line.indexOf(" ");
            word = line.substring(0, idx);
            strArray = line.substring(idx);
            strArray = strArray.substring(2, strArray.length() - 1);

            String[] sArr = pattern.split(strArray);
            double[] data = new double[sArr.length];

            for(int i = 0; i < sArr.length; i++) {
                data[i] = Double.parseDouble(sArr[i]);
            }

            wordScore = getMetrics(data);

            Pair<String, Double> p = new Pair<>(word, wordScore);

            ts.add(p);

            if(ts.size() > setSize) {
                ts.remove(ts.last());
            }

            if(itr % 100000 == 0) {
                printSet(ts, itr, word);
            }

            itr++;
        }

        br.close();  
        
        System.out.println("----------------------------------------------------");

        for(Pair<String, Double> p: ts) {
            if(p.getKey().length() > 7) {
                System.out.println(p.getKey() + "\t" + p.getValue());
            }
            else {
                System.out.println(p.getKey() + "\t\t" + p.getValue());
            }
        }

        System.out.println();

        System.out.println("Finished " + itr + " iterations");

    }
    
}
